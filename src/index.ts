import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent, session } from 'electron';
import Parser from 'rss-parser';
import { FeedItem, NewFeedItem } from './types/FeedItem';
import { ElectronBlocker } from '@ghostery/adblocker-electron';
import fetch from 'cross-fetch';
import { Subscription } from './types/Subscription';
import Store from 'electron-store';
import db from './database';
import { RefreshFeedResultsMap } from './types/RefreshFeedResult';
import { RunResult, Statement } from 'better-sqlite3';

const store = new Store();



// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () : void => {

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      webviewTag: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then( async () => {
  const blocker = await ElectronBlocker.fromPrebuiltAdsAndTracking(fetch);
  blocker.enableBlockingInSession(session.defaultSession);

  blocker.on('request-blocked', (req) => {
    console.log('[BLOCKED]', req.url);
  });

  createWindow();

}).catch( (err) =>{
  console.error( "Failed at startup: ", err );
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

type CustomFeed = {foo: string};
type CustomItem = {'media:thumbnail' : string};

const parser: Parser<CustomFeed, CustomItem> = new Parser({
  customFields: {
    feed: ['foo'],
    item: ['media:thumbnail']
  }
});


ipcMain.handle('refresh-feeds', async ( event: IpcMainInvokeEvent, subs : Subscription[] ) => {
  // type FeedResponse = {
  //   title   : string;
  //   link     : string;
  //   pubDate?: string;
  // };

  const results : RefreshFeedResultsMap = {};
  let items : NewFeedItem[] = [];

  for( const s of subs ) {
    try {
      const feed = await parser.parseURL( s.url );

      feed.items.forEach(i => {
        console.log(i);
        const f : NewFeedItem = { 'id':  s.id, 'title': i.title, 'url': i.link, 'pub_date': i.pubDate };
        items.push(f);
      });
      results[s.id] = { success: true, errorMessage: '' };

    } catch( err ) {
      console.error(err);
      results[s.id] = { success: false, errorMessage: err instanceof Error ? err.message : String(err) };
    }
  }

  const stmt: Statement = db.prepare('INSERT INTO feed_item (sub_id, title, url, pub_date) VALUES (?, ?, ?, ?)');
  for( const i of items ) {
    try {
      const res: RunResult = stmt.run( i.id, i.title, i.url, i.pub_date );
      console.log(res);
    } catch( err ) {
      results[i.id] = { success: false, errorMessage: err instanceof Error ? err.message : String(err) };
    }
  }
  return results;
});


ipcMain.handle( 'get-subscriptions', () => {
   const stmt = db.prepare('SELECT * FROM subscription');
   return stmt.all() as Subscription[];
});

ipcMain.handle( 'get-feeds', ( event: IpcMainInvokeEvent, subs : Subscription[] ) => {
  const stmt = db.prepare('SELECT * FROM feed_item WHERE sub_id = ? ORDER BY pub_date DESC');

  let items : FeedItem[] = [];
  for( const s of subs ) {
    console.log(s);
    items = items.concat( stmt.all(s.id) as FeedItem[] );
  }
  console.log(items);
  return items;
});